// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @map("userId")
  firstName      String
  lastName       String
  email          String    @unique
  passwordHash   String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deleted        Boolean   @default(false)
  deletedAt      DateTime?
  assignedIssues Issue[]   @relation("UserAssignedIssues")
  reportedIssues Issue[]   @relation("UserReportedIssues")
  comments       Comment[]
}

model Workspace {
  id       String    @id @default(uuid()) @map("workspaceId")
  name     String    @unique
  slug     String
  projects Project[]
}

model Project {
  id           String        @id @default(uuid())
  name         String        @unique
  status       ProjectStatus @default(DRAFT)
  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  projectAlias String?       @unique @db.VarChar(10)
  issues       Issue[]
}

enum ProjectStatus {
  DRAFT
  READY
  INPROGRESS
  COMPLETED
  CANCELLED
}

model Issue {
  id          Int             @id @default(autoincrement())
  title       String
  description String?
  status      IssueStatusEnum @default(TODO)
  priority    PriorityEnum    @default(LOW)
  assignee    User            @relation("UserAssignedIssues", fields: [userId], references: [id])
  userId      String
  project     Project         @relation(fields: [projectId], references: [id])
  projectId   String
  dueDate     DateTime?
  Reporter    User            @relation("UserReportedIssues", fields: [reporterId], references: [id])
  reporterId  String
  attachment  String[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  comments    Comment[]
}

enum IssueStatusEnum {
  TODO
  INPROGRESS
  BLOCKED
  TESTING
  DONE
}

enum PriorityEnum {
  LOW
  MEDIUM
  HIGH
}

model Comment {
  uuid       String   @id @default(uuid())
  issue      Issue    @relation(fields: [issueId], references: [id])
  issueId    Int
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  body       String
  attachment String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
